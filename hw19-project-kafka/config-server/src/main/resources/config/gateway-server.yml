eureka:
  instance:
    hostName: ${spring.application.name}
    preferIpAddress: true
    metadataMap:
      prometheus:
        scrape: true
        path: "/actuator/prometheus"
        port: ${server.port}
  client:
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://discovery:8761/eureka/

spring:
  cloud:
    gateway:
      #discovery.locator.enabled: true
      routes:
        #- id: web
        #  uri: http://web
        #  predicates:
        #    - Path=/lk/**
        - id: booklibrary
          uri: lb://booklibrary-microservice
          predicates:
            #- Path=/api/library/**,/swagger-ui/**,/v3/**
            - Path=/api/library/**,/swagger-ui/**,/v3/**,/lk/**
          filters:
            - TokenRelay=
        - id: auth
          uri: lb://auth-microservice
          predicates:
            - Path=/api/auth/**
          filters:
            - TokenRelay=
        - id: notification
          uri: lb:ws://notification-microservice
          predicates:
            - Path=/notification/**
      #default-filters: TokenRelay=

  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://sso/realms/BookLibrary
            #user-name-attribute: preferred_username
        registration:
          keycloak:
            provider: keycloak
            client-id: ${spring.application.name}
            #client-secret: client-secret
            #flow
            authorization-grant-type: authorization_code
            scope:
              - openid

management:
  endpoints:
    #enabled-by-default: false
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      #enabled: true
      probes:
        enabled: true
